@import "./assert.scss";
@import "./string.scss";
@debug TestSuite();

@function test_str_join() {
  $setup: Test(test_str_join);

  $joined: StrJoin(("4", "5", "6"));
  $test: Assert($joined == "456");

  @return TestEnd();
}

@function test_str_ltrim() {
  $setup: Test(test_str_ltrim);

  $trimmed: StrLTrim("   ");
  $test: Assert($trimmed == "");

  $trimmed: StrLTrim("");
  $test: Assert($trimmed == "");

  $trimmed: StrLTrim("thing.txt");
  $test: Assert($trimmed == "thing.txt");

  $trimmed: StrLTrim("f");
  $test: Assert($trimmed == "f");

  $trimmed: StrLTrim("thing   ");
  $test: Assert($trimmed == "thing   ");

  $trimmed: StrLTrim("    thing");
  $test: Assert($trimmed == "thing");

  $trimmed: StrLTrim("  thing   ");
  $test: Assert($trimmed == "thing   ");

  @return TestEnd();
}

@function test_str_rtrim() {
  $setup: Test(test_str_rtrim);

  $trimmed: StrRTrim("   ");
  $test: Assert($trimmed == "");

  $trimmed: StrRTrim("");
  $test: Assert($trimmed == "");

  $trimmed: StrRTrim("f");
  $test: Assert($trimmed == "f");

  $trimmed: StrRTrim("foo");
  $test: Assert($trimmed == "foo");

  $trimmed: StrRTrim("foo   ");
  $test: Assert($trimmed == "foo");

  $trimmed: StrRTrim("    foo");
  $test: Assert($trimmed == "    foo");

  $trimmed: StrRTrim("  foo   ");
  $test: Assert($trimmed == "  foo");

  @return TestEnd();
}

@function test_str_trim() {
  $setup: Test(test_str_trim);

  $trimmed: StrTrim("thing.txt");
  $test: Assert($trimmed == "thing.txt");

  $trimmed: StrTrim("foo   ");
  $test: Assert($trimmed == "foo");

  $trimmed: StrTrim("    foo");
  $test: Assert($trimmed == "foo");

  $trimmed: StrTrim("  foo   ");
  $test: Assert($trimmed == "foo");

  @return TestEnd();
}

@function test_str_split() {
  $setup: Test(test_str_split);

  $split: StrSplit("4, 5, 6", ", ");
  $test: Assert(length($split) == 3);
  $test: Assert(nth($split, 1) == "4");
  $test: Assert(nth($split, 2) == "5");
  $test: Assert(nth($split, 3) == "6");

  $split: StrSplit("4, 5, 6", ",");
  $test: Assert(length($split) == 3);
  $test: Assert(nth($split, 1) == "4");
  $test: Assert(nth($split, 2) == "5");
  $test: Assert(nth($split, 3) == "6");

  $split: StrSplit("4, 5, 6", "xxxx");
  $test: Assert(length($split) == 1);

  @return TestEnd();
}

@function test_str_split_complex() {
  $setup: Test(test_str_split);

  $split: StrSplit("/one/two/three.txt", "/");
  $test: Assert(nth($split, 1) == "");
  $test: Assert(nth($split, 2) == "one");
  $test: Assert(nth($split, 3) == "two");
  $test: Assert(nth($split, 4) == "three.txt");

  @return TestEnd();
}

@debug test_str_rtrim();
@debug test_str_ltrim();
@debug test_str_trim();
@debug test_str_join();
@debug test_str_split();
@debug test_str_split_complex();
@debug TestSuiteEnd();
